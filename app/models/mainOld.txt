package com.example.deboxionapp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TabHost;
import android.widget.TabHost.TabSpec;
import android.widget.TextView;


public class MainActivity extends Activity {
	
	RelativeLayout rl;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		rl = (RelativeLayout) findViewById(R.id.view_principal);
		ActionBar actionBar = getActionBar();
		actionBar.setCustomView(R.layout.actionbar_layout);		
		actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);

	    actionBar.setDisplayHomeAsUpEnabled(true);
	    TabHost tabHost=(TabHost)findViewById(R.id.tabHost);
	    tabHost.setup();

	    TabSpec spec1=tabHost.newTabSpec("Tab 1");
	    spec1.setContent(R.id.tab1);
	    spec1.setIndicator("Hoy");

	    TabSpec spec2=tabHost.newTabSpec("Tab 2");
	    spec2.setContent(R.id.tab2);
	    spec2.setIndicator("Fecha");

	    TabSpec spec3=tabHost.newTabSpec("Tab 3");
	    spec3.setContent(R.id.tab3);
	    spec3.setIndicator("Favorito");

	    tabHost.addTab(spec1);
	    tabHost.addTab(spec2);
	    tabHost.addTab(spec3);	 
	    
	    new HttpAsyncTask().execute("http://200.168.70.5:3000/test/getJobs");
	}
	
	private static String convertInputStreamToString(InputStream inputStream) throws IOException{
        BufferedReader bufferedReader = new BufferedReader( new InputStreamReader(inputStream));
        String line = "";
        String result = "";
        while((line = bufferedReader.readLine()) != null)
            result += line;
 
        inputStream.close();
        return result;
 
    }
	
	 public static String GET(String url){
	        InputStream inputStream = null;
	        String result = "";
	        try {
	 
	            // create HttpClient
	            HttpClient httpclient = new DefaultHttpClient();
	 
	            // make GET request to the given URL
	            HttpResponse httpResponse = httpclient.execute(new HttpGet(url));
	 
	            // receive response as inputStream
	            inputStream = httpResponse.getEntity().getContent();
	 
	            // convert inputstream to string
	            if(inputStream != null)
	                result = convertInputStreamToString(inputStream);
	            else
	                result = "Did not work!";
	 
	        } catch (Exception e) {
	            Log.d("InputStream", e.getLocalizedMessage());
	        }
	 
	        return result;
	    }
	
	private class HttpAsyncTask extends AsyncTask<String, Void, String> {

		private ProgressDialog dialog = new ProgressDialog(MainActivity.this);
        @Override
        
        protected void onPreExecute(){
        	
        	dialog= ProgressDialog.show(MainActivity.this, "Espere", "Actualizando Datos Devocionales");
        }
        protected String doInBackground(String... urls) {
 
            return GET(urls[0]);
        }
        // onPostExecute displays the results of the AsyncTask.
        @Override
        protected void onPostExecute(String result) {
        	if (dialog.isShowing()) 
			{
	            dialog.dismiss();
	        }
        	result = result.replace("=>", ":");
        	result = result.replace("[", "");
        	result = result.replace("]", "");
        	result = result.replace("\\\n", "");
        	result = result.replace("\\\r", "");
        	try 
        	{
				JSONObject jsonObj = new JSONObject(result);
				//JSONArray jsonArra = new JSONArray(result);
				//Log.v("Keys", Integer.toString(jsonArra.length()));
				Log.v("Keys", jsonObj.toString());
				TextView fecha = (TextView) findViewById(R.id.fecha);
				TextView titulo = (TextView) findViewById(R.id.titulo);
				TextView versiculo = (TextView) findViewById(R.id.versiculo);
				TextView cuerpo = (TextView) findViewById(R.id.cuerpo);
				TextView autor = (TextView) findViewById(R.id.autor);
				
				fecha.setText(jsonObj.getString("fecha_dia"));
				titulo.setText(jsonObj.getString("titulo"));
				versiculo.setText('"' + jsonObj.getString("versiculo") + " " + jsonObj.getString("cita") + '"');
				cuerpo.setText(jsonObj.getString("cuerpo"));
				autor.setText(jsonObj.getString("autor"));
			} 
        	catch (JSONException e) 
        	{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }
}
